// To run this code you need to install the following dependencies:
// npm install @google/genai mime
// npm install -D @types/node

import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({
  apiKey: process.env.NEXT_PUBLIC_GEMINI_API_KEY,
});
const tools = [
  {
    googleSearch: {},
  },
];
const config = {
  thinkingConfig: {
    thinkingBudget: -1,
  },
  tools,
  systemInstruction: [
    {
      text: `1. **Data Structure Information:**
   - You have two types of elements: 'component' and 'layout'
   - Layout elements have 'numberOfColumn' property (1, 2, 3, or 4 columns)
   - Each layout can contain components in numbered positions [0], [1], [2], etc.
   - Component types: 'button', 'text', 'image', 'divider'
   - Layout types: 'column' (with different column counts)
   - Write Meaning full text content with Emoji icons needed
  - Give response in JSON format only 
  - All fields icon need to set null
  - Images must match the subject of the request 
  - Images must be valid and show up
  - Images always has height and width in a percent

2. **Component Structure:**
   typescript
   // Component
   type SidebarElementComponent = {
     icon: any;
     label: string;
     type: 'button' | 'text' | 'image' | 'divider';
     content: string;
     url: string;
     style: CSSProperties;
     imageUrl?: string;
     alt?: string;
     group: 'component';
   }

   // Layout
   type SidebarElementLayout = {
     label: string;
     type: 'column';
     numberOfColumn: number;
     icon: ReactComponent;
     group: 'layout';
     [key: number]: ComponentTypeInLayout; // Components placed in numbered positions
   }

There Object template return we needed 
const data: CanvasItemsType[] = [
  {
    // Layout properties
    id: 1,
    label: '1 Column Layout',
    type: 'column',
    numberOfColumn: 1,
    icon: null,
    group: 'layout',

    // Component in position 0
    0: {
      id: 101,
      icon: null,
      label: 'Image',
      type: 'image',
      content: 'Full-width banner image of sakura in bloom.',
      imageUrl:
        'https://images.pexels.com/photos/1482803/pexels-photo-1482803.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
      alt: '–í–µ—Ç–≤–∏ —Å–∞–∫—É—Ä—ã –≤ –ø–æ–ª–Ω–æ–º —Ü–≤–µ—Ç—É',
      url: '',
      style: {
        padding: '0px',
        margin: '0px',
      },
      group: 'component',
    },
  },
  {
    // Layout properties
    id: 2,
    label: '1 Column Layout',
    type: 'column',
    numberOfColumn: 1,
    icon: null,
    group: 'layout',

    // Component in position 0
    0: {
      id: 102,
      icon: null,
      label: 'Text',
      type: 'text',
      content:
        '<h1>üå∏ –ú–≥–Ω–æ–≤–µ–Ω–∏—è –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–∞–∫—É—Ä—ã üå∏</h1><p>–ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ª—ë–≥–∫–æ–µ –¥—É–Ω–æ–≤–µ–Ω–∏–µ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –≤–µ—Ç–µ—Ä–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–Ω–æ—Å–∏—Ç —Å–ª–∞–¥–∫–∏–π –∞—Ä–æ–º–∞—Ç —Ü–≤–µ—Ç—É—â–µ–π —Å–∞–∫—É—Ä—ã. –≠—Ç–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ö—Ä—É–ø–∫–æ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ —Ç–∏—Ö–æ–π —Ä–∞–¥–æ—Å—Ç–∏. –ü—É—Å—Ç—å —ç—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏—è –Ω–∞–ø–æ–ª–Ω—è—Ç –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ —Ç–µ–ø–ª–æ–º –∏ –≥–∞—Ä–º–æ–Ω–∏–µ–π.</p>',
      url: '',
      style: {
        fontFamily: 'Georgia, serif',
        fontSize: '16px',
        lineHeight: '1.6',
        color: '#333333',
        backgroundColor: '#FFF9FB',
        padding: '30px 20px',
        textAlign: 'center',
      },
      group: 'component',
    },
  },
  {
    // Layout properties
    id: 3,
    label: '2 Column Layout',
    type: 'column',
    numberOfColumn: 2,
    icon: null,
    group: 'layout',

    // Component in position 0
    0: {
      id: 103,
      icon: null,
      label: 'Text',
      type: 'text',
      content:
        '<h3>üå± –í—Ä–µ–º—è –¥–ª—è –º–µ—á—Ç—ã</h3><p>–ö–æ–≥–¥–∞ –ø—Ä–∏—Ä–æ–¥–∞ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞–Ω—ã –∏ –º–µ—á—Ç–∞—Ç—å –æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º. –ö–∞–∂–¥—ã–π –Ω–µ–∂–Ω—ã–π –ª–µ–ø–µ—Å—Ç–æ–∫ ‚Äî —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ –∂–∏–≤—ë—Ç –≤ –∫–∞–∂–¥–æ–º –º–æ–º–µ–Ω—Ç–µ.</p>',
      url: '',
      style: {
        fontFamily: 'Georgia, serif',
        color: '#4E4E4E',
        backgroundColor: '#FFF9FB',
        padding: '20px',
      },
      group: 'component',
    },

    // Component in position 1
    1: {
      id: 104,
      icon: null,
      label: 'Text',
      type: 'text',
      content:
        '<h3>üíå –ü–æ—Å–ª–∞–Ω–∏–µ –≤–µ—Å–Ω—ã</h3><p>–≠—Ç–æ –ø–∏—Å—å–º–æ ‚Äî –Ω–∞—à–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Ü–≤–µ—Ç–µ–Ω–∏–µ–º —Å–∞–∫—É—Ä—ã. –ñ–µ–ª–∞–µ–º –≤–∞–º —Å–≤–µ—Ç–ª—ã—Ö –¥–Ω–µ–π, –ø–æ–ª–Ω—ã—Ö –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç—Ç–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–æ—Ä–æ–π!</p>',
      url: '',
      style: {
        fontFamily: 'Georgia, serif',
        color: '#4E4E4E',
        backgroundColor: '#FFF9FB',
        padding: '20px',
      },
      group: 'component',
    },
  },
  {
    // Layout properties
    id: 4,
    label: '1 Column Layout',
    type: 'column',
    numberOfColumn: 1,
    icon: null,
    group: 'layout',

    // Component in position 0 (Divider)
    0: {
      id: 105,
      icon: null,
      label: 'Divider',
      type: 'divider',
      content: '',
      url: '',
      style: {
        borderTop: '2px solid #FADADD',
        margin: '20px 50px',
      },
      group: 'component',
    },
  },
  {
    // Layout properties
    id: 5,
    label: '1 Column Layout',
    type: 'column',
    numberOfColumn: 1,
    icon: null,
    group: 'layout',

    // Component in position 0 (Button)
    0: {
      id: 106,
      icon: null,
      label: 'Button',
      type: 'button',
      content: '–ù–∞–≤—Å—Ç—Ä–µ—á—É –≤–µ—Å–Ω–µ ‚ú®',
      url: '#',
      style: {
        fontFamily: 'Arial, sans-serif',
        fontSize: '16px',
        fontWeight: 'bold',
        color: '#FFFFFF',
        backgroundColor: '#E5A4B4',
        padding: '15px 30px',
        borderRadius: '25px',
        textDecoration: 'none',
        display: 'inline-block',
        margin: '10px',
      },
      group: 'component',
    },
  },
];`,
    },
  ],
};
const model = 'gemini-2.5-pro';

export async function generateTemplateWithAi({ prompt }: { prompt: string }) {
  const contents = [
    {
      role: 'user',
      parts: [
        {
          text: prompt,
        },
      ],
    },
  ];

  const response = await ai.models.generateContent({
    model,
    config,
    contents,
  });

  return response;
}
